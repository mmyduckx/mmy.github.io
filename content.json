{"meta":{"title":"mmy's Blog","subtitle":"thinking&essay","description":"欢迎来到mmy的小窝~","author":"mmy","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2017-05-25T16:07:46.000Z","updated":"2017-05-25T16:08:08.000Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-05-25T16:26:25.000Z","updated":"2017-05-25T16:27:01.000Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"学会使用 Gson @SerializedName","slug":"学会使用 Gson @SerializedName","date":"2017-05-27T02:23:48.000Z","updated":"2017-05-28T16:12:46.000Z","comments":true,"path":"2017/05/27/学会使用 Gson @SerializedName/","link":"","permalink":"http://yoursite.com/2017/05/27/学会使用 Gson @SerializedName/","excerpt":"平常使用的有关 Json 转换的库中 Gson 和 fastJson 库用的最多，今天来说说 Gson 在 SimpleNews.io 项目中的使用，对了本次使用的版本为 gson-gson-2.2.4，现在已经更新到了 2.7 版本。 主要内容注解@SerializedName 的使用其它小技巧 一、Gson 是什么？ Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object. Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of. Gson 是一个 Java 库,可用于将 Java 对象转换为 JSON 字符串表示。也可以被用来将一个 JSON 字符串转换成一个等效的 Java 对象，Gson 可以处理 Java 对象包括已存在的对象。 二、我的需求我们熟知 JSON 和 xml 都用于网络传输的，由于 JSON 比 XML 要更轻量，所以被用于很多项目，我这里也是使用的 JSON 作为服务器和客户端沟通的语言。","text":"平常使用的有关 Json 转换的库中 Gson 和 fastJson 库用的最多，今天来说说 Gson 在 SimpleNews.io 项目中的使用，对了本次使用的版本为 gson-gson-2.2.4，现在已经更新到了 2.7 版本。 主要内容注解@SerializedName 的使用其它小技巧 一、Gson 是什么？ Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object. Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of. Gson 是一个 Java 库,可用于将 Java 对象转换为 JSON 字符串表示。也可以被用来将一个 JSON 字符串转换成一个等效的 Java 对象，Gson 可以处理 Java 对象包括已存在的对象。 二、我的需求我们熟知 JSON 和 xml 都用于网络传输的，由于 JSON 比 XML 要更轻量，所以被用于很多项目，我这里也是使用的 JSON 作为服务器和客户端沟通的语言。我的需求是将服务器返回的 JSON 转换成 java 对象，原来是按部就班的一层一层使用 JSONObject 进行遍历解析，不太人性化。 所以想使用 Gson 来简化逻辑，由于还想使用原来的 model 类，也不想更改字段名称，因为 Gson 解析的时候是根据字段名来匹配的，然后就发现了注解 @SerializedName ，不管是对象转 JSON 还是 JSON 转对象，字段名称会被替换成注解的名字，一下就解决了需求。 同样我们也可以将一个对象转成 JSON 字符串，也可以为变量设置 @SerializedName 注解，这样生成的 JSON 中，Key 值就是注解的值。 实例： 1List&lt;ImageBean&gt; iamgeBeanList = gson.fromJson(response, new TypeToken&lt;List&lt;ImageBean&gt;&gt;() &#123;&#125;.getType()); public class ImageBean implements Serializable &#123; public static final long serialVersionUID = 1L; @SerializedName(&quot;title&quot;) public String title; @SerializedName(&quot;thumburl&quot;) public String thumbUrl; @SerializedName(&quot;sourceurl&quot;) public String imageUrl; @SerializedName(&quot;height&quot;) public int height; @SerializedName(&quot;width&quot;) public int width; &#125; 我们将得到的数据 response (这里的结果必须是一个正确格式的 JSON 数据)，使用 fromJson() 方法来将 JSON 数据转成 java 对象，我们起作用的注解就在 ImageBean model类，为每一个变量添加 @SerializedName 注解，这样在解析的时候就能转换成注解标示的字段名。 思考： @SerializedName 这个注解解决了我们 Model 和 JSON 不对应的问题，带来的好处自然不言而喻。 1、首先将服务器字段和客户端字段名称区分，不用保持一一对应关系， 客户端定义的字段不用跟这后台接口字段改变儿改变，只需要更改@SerializedName 中的取值即可； 2、我们输出一个 JSON 格式的数据也可以使用 @SerializedName 不用为了输出格式而影响 java 中驼峰命名规范； 实现原理： 尝试着查看 Gson 源码，粗略的跟了一下代码，在 ReflectiveTypeAdapterFactory 类中大概找出原理，以下是 Gson 官方代码： 1private Map&lt;String, BoundField&gt; getBoundFields(Gson context, TypeToken&lt;?&gt; type, Class&lt;?&gt; raw) &#123; Map&lt;String, BoundField&gt; result = new LinkedHashMap&lt;String, BoundField&gt;(); if (raw.isInterface()) &#123; return result; &#125; Type declaredType = type.getType(); while (raw != Object.class) &#123; Field[] fields = raw.getDeclaredFields(); for (Field field : fields) &#123; boolean serialize = excludeField(field, true); boolean deserialize = excludeField(field, false); if (!serialize &amp;&amp; !deserialize) &#123; continue; &#125; field.setAccessible(true); Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType()); BoundField boundField = createBoundField(context, field, getFieldName(field), TypeToken.get(fieldType), serialize, deserialize); BoundField previous = result.put(boundField.name, boundField); if (previous != null) &#123; throw new IllegalArgumentException(declaredType + &quot; declares multiple JSON fields named &quot; + previous.name); &#125; &#125; type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass())); raw = type.getRawType(); &#125; return result; &#125; static String getFieldName(FieldNamingStrategy fieldNamingPolicy, Field f) &#123; SerializedName serializedName = f.getAnnotation(SerializedName.class); return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value(); &#125; 在 getFieldName 方法中，能看出来在获取 Field 时去匹配了 SerializedName 注解类标示的字段，存在的话取的是注解设定的值。 三、其它情况一：多个字段取一个项目中只用了一个字段来更改解析字段名，还有一种情况，我们在开发的时候会用到，这里举一个不太合适的例子，例如：后台同学给配数据，后期要废弃其中一个字段，但又不能影响老版本的使用，于是增加了一个字段，取值相同。 解决： 当然我们在新版本直接讲字段改成新数据字段取值就好了。 这是一种解决办法，但是不能保证以后没有其它字段废弃或者添加，这里在介绍一个属性 alternate 简明知意，用来替换; 可以这么写: 1@SerializedName(value = &quot;thumburl&quot;, alternate = &#123;&quot;thumburl_new&quot;&#125;) 当出现 thumburl 或者 thumburl_new 字段时，就会主动匹配，当然如果都存在就匹配最后一个，这样在老版本上虽然 服务器返回的是增加 thumburl_new 的数据，但是客户端 使用的是 @SerializedName(“thumburl”) 来解析的，所以也不会出问题，在新版本上使用 thumburl_new 字段，等完全替代老版本以后，就可以在服务器中去掉原来的 thumburl 字段，当然我这种情况是比较理想的，一般也不会说随意更改字段含义，但也不排除这种可能，如果有那我们自然应对就好。 注意： 1、千万注意要解析成对象的类，和对象转成 JSON 的类，不要去混淆，否则会解析不成功，在 Android 中可以修改 proguard-project.txt 文件来过滤不混淆的类； 2、需要注入到 js 当中的类不能混淆； 3、另外在使用 Gson 和 fastJson 中，发现 fastJson 在某些情况下内部会出现空指针，而且数据解析有可能不正确，项目中遇到一次在某条数据下出问题，然后替换了 Gson 就好了，具体区别还查证； 4、自己使用的时候尽量封装以下，避免以后换库导致修改地方过多； 四、 参考以下是写作过程中参考的资料： Gson 官方 Github SimpleNews.io","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}]},{"title":"Mac下如何显示隐藏文件/文件夹","slug":"Mac下如何显示隐藏文件:文件夹","date":"2017-05-25T15:09:38.000Z","updated":"2017-05-25T15:48:42.000Z","comments":true,"path":"2017/05/25/Mac下如何显示隐藏文件:文件夹/","link":"","permalink":"http://yoursite.com/2017/05/25/Mac下如何显示隐藏文件:文件夹/","excerpt":"","text":"在应用程序里打开终端： 12cd 你的文件夹名ls -a 即可显示该文件夹下的所有隐藏文件 如果你想打开或关闭整个系统的隐藏文件可以在终端下输入以下命令： 打开系统的隐藏文件： defaults write com.apple.finder AppleShowAllFiles -bool true关闭显示隐藏文件：defaults write com.apple.finder AppleShowAllFiles -bool false tip:别忘了重启finder哦「alt+反键finder」","categories":[{"name":"技巧","slug":"技巧","permalink":"http://yoursite.com/categories/技巧/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-05-23T03:55:53.000Z","updated":"2017-05-28T16:14:20.000Z","comments":true,"path":"2017/05/23/hello-world/","link":"","permalink":"http://yoursite.com/2017/05/23/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"稳定排序和不稳定排序","slug":"稳定排序和不稳定排序","date":"2016-11-16T15:14:08.000Z","updated":"2017-05-28T16:13:50.000Z","comments":true,"path":"2016/11/16/稳定排序和不稳定排序/","link":"","permalink":"http://yoursite.com/2016/11/16/稳定排序和不稳定排序/","excerpt":"首先，排序算法的稳定性大家应该都知道，通俗地讲就是能保证排序前2个相等的数其在序列的前后位置顺序和排序后它们两个的前后位置顺序相同。在简单形式化一下，如果Ai = Aj，Ai原来在位置前，排序后Ai还是要在Aj位置前。 其次，说一下稳定性的好处。排序算法如果是稳定的，那么从一个键上排序，然后再从另一个键上排序，第一个键排序的结果可以为第二个键排序所用。基数排序就是这样，先按低位排序，逐次按高位排序，低位相同的元素其顺序再高位也相同时是不会改变的。另外，如果排序算法稳定，对基于比较的排序算法而言，元素交换的次数可能会少一些（个人感觉，没有证实）。 回到主题，现在分析一下常见的排序算法的稳定性，每个都给出简单的理由。","text":"首先，排序算法的稳定性大家应该都知道，通俗地讲就是能保证排序前2个相等的数其在序列的前后位置顺序和排序后它们两个的前后位置顺序相同。在简单形式化一下，如果Ai = Aj，Ai原来在位置前，排序后Ai还是要在Aj位置前。 其次，说一下稳定性的好处。排序算法如果是稳定的，那么从一个键上排序，然后再从另一个键上排序，第一个键排序的结果可以为第二个键排序所用。基数排序就是这样，先按低位排序，逐次按高位排序，低位相同的元素其顺序再高位也相同时是不会改变的。另外，如果排序算法稳定，对基于比较的排序算法而言，元素交换的次数可能会少一些（个人感觉，没有证实）。 回到主题，现在分析一下常见的排序算法的稳定性，每个都给出简单的理由。 (1)冒泡排序 冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。 (2)选择排序 选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n - 1个元素，第n个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。 (3)插入排序插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。 (4)快速排序快速排序有两个方向，左边的i下标一直往右走，当a[i] &lt;= a[center_index]，其中center_index是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当a[j] &gt; a[center_index]。如果i和j都走不动了，i &lt;= j，交换a[i]和a[j],重复上面的过程，直到i &gt; j。 交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和a[j]交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为5 3 3 4 3 8 9 10 11，现在中枢元素5和3（第5个元素，下标从1开始计）交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j] 交换的时刻。 (5)归并排序归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素（认为直接有序）或者2个序列（1次比较和交换），然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。 (6)基数排序基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以其是稳定的排序算法。 (7)希尔排序(shell)希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小， 插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比O(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以shell排序是不稳定的。 (8)堆排序我们知道堆的结构是节点i的孩子为2 i和2 i + 1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n / 2开始和其子节点共3个值选择最大（大顶堆）或者最小（小顶堆），这3个元素之间的选择当然不会破坏稳定性。但当为n / 2 - 1， n / 2 - 2， … 1这些个父节点选择元素时，就会破坏稳定性。有可能第n / 2个父节点交换把后面一个元素交换过去了，而第n / 2 - 1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。 综上，得出结论: 选择排序、快速排序、希尔排序、堆排序不是稳定的排序算法，而冒泡排序、插入排序、归并排序和基数排序是稳定的排序算法","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"}],"tags":[{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"}]}]}